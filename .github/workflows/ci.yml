name: CI - Test Runner

# Run the workflow when commits are pushed on main or when a PR is modified
on:
  push:
    branches:
      - main
      - ci/**

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  setup:

    # ----------------------------------------------------------------------------------------------

    name: Setup Environment
    # Execute the CI on the course's runners
    runs-on: ubuntu-latest
    outputs:
      gradle-cache: ${{ steps.gradle-cache.outputs.cache-hit }}
      avd-cache: ${{ steps.avd-cache.outputs.cache-hit }}
      firebase-path: ${{ steps.set-firebase-path.outputs.path }}

    steps:
      # First step : Checkout the repository on the runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          # Shallow clones should be disabled for a better relevancy of Sonar analysis
          #   (if we use Sonar Later)
          fetch-depth: 0

      # Kernel-based Virtual Machine (KVM) is an open source virtualization technology built into
      #   Linux. Enabling it allows the Android emulator to run faster.
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      # Setup JDK 17
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      # Setup NodeJS
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Setup Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      # Cache Firebase CLI installation
      - name: Cache Firebase CLI
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: firebase-tools-cache
      # Set Firebase path for future steps
      - name: Set Firebase path
        id: set-firebase-path
        run: echo "path=$HOME/.npm-global/bin" >> $GITHUB_OUTPUT

        # Cache Gradle dependencies
      - name: Gradle cache
        id: gradle-cache
        uses: gradle/actions/setup-gradle@v3

      # Cache the Emulator, if the cache does not hit, create the emulator
      - name: AVD cache
        id: avd-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-34

      # If the AVD cache did not hit, create the AVD and generate a snapshot for future caching
      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      # Load google-services.json and local.properties from the secrets
      - name: Decode secrets
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        run: |
          if [ -n "$GOOGLE_SERVICES" ]; then
            echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          else
            echo "::warning::GOOGLE_SERVICES secret is not set."
          fi

      # Make gradlew executable
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

  # ------------------------------------------------------------------------------------------------

  firebase_check:
    name: Firestore Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      # Restore Firebase CLI cache and add it to PATH
      - name: Restore Firebase cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: firebase-tools-cache
      - name: Add Firebase to PATH
        run: echo "${HOME}/.npm-global/bin" >> $GITHUB_PATH

      # Check Firestore emulator configuration
      - name: Firestore Check
        run: |
          if [ ! -e "firebase.json" ]; then # Check if firebase.json exists
            echo "(Warning): 'firebase.json' file is missing. Run 'firebase emulators:init'."
            exit 0
          fi
          jq -e '.emulators' firebase.json >/dev/null || { # Check if emulators are configured
            echo "'firebase.json' is missing 'emulators'. Run 'firebase emulators:init'."
            exit 1
          }
          for e in auth firestore; do # Check if auth and firestore emulators are configured
            jq -e ".emulators.$e" firebase.json >/dev/null || {
              echo "'firebase.json' is missing 'emulators.$e'. Run 'firebase emulators:init'."
              exit 1
            }
          done

  # ------------------------------------------------------------------------------------------------

  check_format:
    # Check formatting
    name: KTFmt Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: KTFmt Check
        run: ./gradlew ktfmtCheck

  # ------------------------------------------------------------------------------------------------

  assemble:
    name: Assemble
    runs-on: ubuntu-latest
    needs: [setup, firebase_check, check_format]
    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: Assemble project
        run: ./gradlew assemble lint --parallel --build-cache

  # ------------------------------------------------------------------------------------------------

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [assemble, check_format]
    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: Run Unit Tests
        run: ./gradlew check --parallel --build-cache

  # ------------------------------------------------------------------------------------------------

  ui_tests:
    name: Instrumented Tests
    runs-on: ubuntu-latest
    needs: [assemble, firebase_check, check_format]
    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # Restore Firebase CLI cache and add it to PATH
      - name: Restore Firebase cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: firebase-tools-cache
      - name: Add Firebase to PATH
        run: echo "${HOME}/.npm-global/bin" >> $GITHUB_PATH

      # Start Firebase emulators for instrumentation tests
      - name: Start Firebase emulators
        run: |
          if [ -e "firebase.json" ] && jq -e '.emulators' firebase.json >/dev/null; then
            echo "Starting Firebase emulators for instrumentation tests..."
            firebase emulators:start --only auth,firestore --project demo-project &
            echo "Firebase emulators started"
          else
            echo "Firebase emulators not configured, skipping emulator startup..."
          fi

      # Run connected tests on the emulator
      - name: Run UI tests on emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          profile: pixel_6
          emulator-options: >
            -no-snapshot
            -no-window
            -gpu swiftshader_indirect
            -no-audio
            -no-boot-anim
          disable-animations: false
          script: |
            echo "Starting connected tests..."
            ./gradlew connectedCheck --parallel --build-cache

  # ------------------------------------------------------------------------------------------------

  sonarcloud:
    name: Coverage & Sonar
    runs-on: ubuntu-latest
    needs: [ unit_tests, ui_tests ]
    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: Generate Coverage Report
        run: ./gradlew jacocoTestReport
      - name: Upload to SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar --parallel --build-cache